import org.gradle.internal.xml.XmlTransformer

plugins {
    id("org.jetbrains.gradle.plugin.idea-ext") version "1.1"
}

project('runenv') {
    ext {
        mcversion = '1.18.2'
        forgeversion = '40.1.31'
    }

    repositories {
        // Repositories for additional runtime dependencies go here
    }

    afterEvaluate {
        dependencies {

        }

        minecraft.runs.forEach(run -> {
            var gameTestNamespace = [] as Set<String>
            rootProject.subprojects.forEach(p -> {
                if (p == project) return
                p.pluginManager.withPlugin('net.minecraftforge.gradle') {
                    var r = p.minecraft.runs.findByName(run.name)
                    if (r.properties.containsKey("forge.enabledGameTestNamespaces")) {
                        gameTestNamespace.addAll(r.properties.get("forge.enabledGameTestNamespaces").split(","))
                    }
                }
            })
            if (!gameTestNamespace.isEmpty()) {
                run.properties.put("forge.enabledGameTestNamespaces", gameTestNamespace.join(","))
            }
        })
    }

    tasks.register("genBuildAllIntellijRuns") {
        dependsOn("genIntellijRuns")
        group("forgegradle runs")
        doLast {
            rootProject.files(
                    ".idea/runConfigurations/runenv_runClient.xml",
                    ".idea/runConfigurations/runenv_runServer.xml"
            ).each { file ->
                if (file.exists()) {
                    var transformer = new XmlTransformer()
                    transformer.addAction { XmlProvider provider ->
                        println("Action")
                        provider.asNode()
                                .configuration
                                .method
                                .option
                                .each {
                                    if (it.@name == "Make") {
                                        it.@name = "MakeProject"
                                    }
                                }
                    }
                    file.withReader { reader ->
                        var text = reader.getText();
                        println(text)
                        file.withWriter { writer ->
                            transformer.transform(text, writer)
                        }
                    }
                }
            }
        }
    }
}