buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "3.+", changing: true
    }
}

apply plugin: "net.minecraftforge.gradle"
apply plugin: "maven"
apply plugin: "java"
apply plugin: "idea"

version = "${minecraft_version}-" + getVersion()
group = "${group}"
archivesBaseName = "${mod_name}"

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "forge"
        url = "http://files.minecraftforge.net/maven"
    }
    maven {
        name = "The Loader"
        url = "https://maven.blamejared.com"
    }
    maven {
        name = "Titanium"
        url = "https://cdn.hrzn.studio/maven/"
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

sourceSets {
    main {
        resources {
            include '**/**'
            // copy everything else, but blender files.
            exclude '**/*.bbmodel'
            //Add the generated main module resources
            srcDirs += 'src/generated/transport'
            //But exclude the cache of the generated data from what gets built
            exclude '.cache'
        }
    }
    quark {
        setupSourceSet(sourceSets.quark, 'quark')
    }
}

def setupSourceSet(SourceSet sourceSet, String name) {
    sourceSet.java {
        srcDir 'src/' + name + '/java'
    }
    sourceSet.resources {
        //Add the generated module resources
        srcDirs += 'src/generated/' + name
        //But exclude the cache of the generated data from what gets built
        exclude '.cache'
    }
    sourceSet.compileClasspath += sourceSets.main.output
}

minecraft {
    mappings channel: "snapshot", version: "${mappings_version}"

    runs {
        client {
            workingDirectory project.file("run")
            mods {
                transport {
                    source(sourceSets.main)
                }
                transport_quark {
                    source(sourceSets.quark)
                }
            }
        }

        server {
            workingDirectory project.file("run")
            mods {
                transport {
                    source(sourceSets.main)
                }
                transport_quark {
                    source(sourceSets.quark)
                }
            }
        }

        data {
            workingDirectory project.file("run")
            environment 'target', 'fmluserdevdata'
            properties 'fml.earlyprogresswindow': 'false'

            args '--all', '--output', file('src/generated/resources/'),
                    '--reports',
                    '--mod', 'transport', '--existing', sourceSets.main.resources.srcDirs[0]

            mods {
                transport {
                    source(sourceSets.main)
                }
            }
        }
    }
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

configurations {
    //Make sure all our sub source set stuff extends the proper base methods so that
    // they can see all the dependencies we have in dependencies including forge
    def compileExtenders = [quarkCompile]
    def compileOnlyExtenders = [quarkCompileOnly]
    def runtimeOnlyExtenders = [quarkRuntimeOnly]
    for (def compileExtender : compileExtenders) {
        compileExtender.extendsFrom(compile)
    }
    for (def compileOnlyExtender : compileOnlyExtenders) {
        compileOnlyExtender.extendsFrom(compileOnly)
    }
    for (def runtimeOnlyExtender : runtimeOnlyExtenders) {
        runtimeOnlyExtender.extendsFrom(runtimeOnly)
    }
}

def version_properties = [
        "version"        : mod_version,
        "mc_version"     : minecraft_version,
        "forge_version"  : min_forge_version,
        "loader_version" : loader_version
]

ext {
    replaceResourcesInfo = [
            "main"  : sourceSets.main,
            "quark" : sourceSets.quark
    ]
}

replaceResourcesInfo.each { output, sourceSet ->
    return tasks.create("${output}ReplaceResources", Copy) {
        outputs.upToDateWhen { false }
        from(sourceSet.resources) {
            include "META-INF/mods.toml"
            expand version_properties
        }
        into "$buildDir/resources/${output}/"
    }
}


dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    if (findProject(':Titanium') != null) {
        compile project(':Titanium')
    } else {
        compile fg.deobf(project.dependencies.create("com.hrznstudio:titanium:${minecraft_version}-${titanium_version}") {
            transitive = false
        })
    }
    compile fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    quarkCompile fg.deobf("vazkii.autoreglib:AutoRegLib:${auto_reg_lib_version}")
    quarkCompile fg.deobf("vazkii.quark:Quark:${quark_version}")
    testImplementation('org.junit.jupiter:junit-jupiter:5.6.1')
}

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = "sources"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${title}",
                "Specification-Vendor"    : "${team}",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "${team}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

artifacts {
    archives javadocJar
    archives srcJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://" + (System.getenv("local_maven") != null ? System.getenv("local_maven") : System.getenv("bamboo_local_maven")))
        }
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

String getVersion() {
    String version = "${mod_version}"
    String branch = project.hasProperty("branch") ? project.branch : ""

    if (branch != "") {
        version += "-" + branch

        String buildNumber = getBuildNumber()
        if (buildNumber != "") {
            version += "." + buildNumber
        }
    }

    return version
}

static String getBuildNumber() {
    String buildNumber = System.getenv("BUILD_NUMBER") != null ? System.getenv("BUILD_NUMBER") : ""
    if (buildNumber == "") {
        buildNumber = System.getenv("bamboo_buildNumber") != null ? System.getenv("bamboo_buildNumber") : ""
    }
    return buildNumber
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "10000"
    }
}
